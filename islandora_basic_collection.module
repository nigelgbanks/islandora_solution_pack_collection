<?php

/*
 * @file
 * islandora_basic_collection.module
 *
 * an Islandora module to handle basic image cmodels
 */

/**
 * Implements hook_menu().
 * we need some standard entry points so we can have consistent urls for different Object actions
 */
define('CREATE_CHILD_COLLECTION', 'create child collection');
define('MANAGE_COLLECTION_POLICY', 'manage collection policy');
define('MANAGE_CONTENT_MODEL_ASSOCIATION', 'manage content model association');
define('MIGRATE_COLLECTION_MEMBERS', 'migrate collection members');


function islandora_basic_collection_menu() {
  $items = array();
  $items['islandora/object/%islandora_object/manage/collection'] = array(
    'title' => 'Collection',
    'page callback' => 'islandora_basic_collection_manage_object',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_basic_collection_access',
    'access arguments' => array(2),
  );
  $items['islandora/object/%islandora_object/manage/collection/ingest'] = array(
    'title' => 'Add an object to this Collection',
    'page callback' => 'islandora_basic_collection_ingest_action',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_ACTION,
    'access callback' => 'islandora_basic_collection_ingest_access',
    'access arguments' => array(2),
  );
  $items['admin/islandora/basic_collection'] = array(
    'title' => 'Core collection',
    'description' => 'Configure the core Islandora collection functionality.',
    'page callback' => 'drupal_get_form',
    'access arguments' => array('administer site configuration'),
    'page arguments' => array('islandora_basic_collection_admin'),
    'file' => 'admin/islandora_basic_collection.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  /* an example of adding a tab for view
    $items['islandora/object/%/view/collection'] = array(
    'title' => 'Collection View',
    'page callback' => 'islandora_basic_collection_view1',
    'page arguments' => array(2),
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'islandora_basic_collection_access',
    'access arguments' => array(2),
    ); */

  return $items;
}

function islandora_basic_collection_init() {
  if (path_is_admin(current_path())) {
    drupal_add_css(drupal_get_path('module', 'islandora_basic_collection') . '/css/islandora_basic_collection.admin.css');
  }
}


/**
 * Implements hook_islandora_required_objects().
 */
function islandora_basic_collection_islandora_required_objects() {

  // module path
  $module_path = drupal_get_path('module', 'islandora_basic_collection');

  return array(
    'islandora_basic_collection' => array(
      'title' => 'Islandora basic collection',
      'objects' => array(
        array(
          'pid' => 'islandora:collectionCModel',
          'label' => 'Islandora collection content model',
          'cmodel' => 'fedora-system:ContentModel-3.0',
          'dsversion' => 2,
          'datastreams' => array(
            array(
              'dsid' => 'ISLANDORACM',
              'label' => 'Islandora content model',
              'mimetype' => 'text/xml',
              'control_group' => 'X',
              'datastream_file' => "$module_path/xml/islandora_basic_collection_content_model.xml",
            ),
            array(
              'dsid' => 'DS-COMPOSITE-MODEL',
              'label' => 'DS-COMPOSITE-MODEL',
              'mimetype' => 'text/xml',
              'control_group' => 'X',
              'datastream_file' => "$module_path/xml/islandora_basic_collection_ds_composite_model.xml",
            ),
          ),
        ),
      ),
    ),
  );
}

/**
 * This function is where we create the view for the related menu item
 * @param type $object_id
 * @return type
 */
function islandora_basic_collection_manage_object($object) {

  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_management');
  module_load_include('inc', 'islandora_basic_collection', 'includes/collection_manager_table');
  module_load_include('inc', 'islandora_basic_collection', 'includes/delete_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/move_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/child_collection');
  module_load_include('inc', 'islandora_basic_collection', 'includes/manage_policies');
  module_load_include('inc', 'islandora_basic_collection', 'includes/change_content_models');

  $form = array();

  $form['collection_manager'] = array(
    '#type' => 'vertical_tabs',
    '#weight' => 0,
    '#prefix' => '',
  );

  if (user_access(CREATE_CHILD_COLLECTION)) {
    $form['collection_manager']['create_child_collection'] = array(
      '#title' => t('Create child collection'),
      '#type' => 'fieldset',
    );

    $form['collection_manager']['create_child_collection']['form'] = drupal_get_form('islandora_create_child_collection_form', $object);
  }

  if (user_access(MANAGE_COLLECTION_POLICY)) {
    $form['collection_manager']['manage_policies'] = array(
      '#type' => 'fieldset',
      '#title' => t('Manage collection policies'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['collection_manager']['manage_policies']['form'] = drupal_get_form('islandora_manage_policies_form', $object);
  }

  if (user_access(MANAGE_CONTENT_MODEL_ASSOCIATION)) {
    $form['collection_manager']['change_content_models'] = array(
      '#type' => 'fieldset',
      '#title' => t('Change content models'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['collection_manager']['change_content_models']['form'] = drupal_get_form('islandora_change_content_models_form', $object);
  }

  if (user_access(MIGRATE_COLLECTION_MEMBERS)) {
    $form['collection_manager']['migrate_members'] = array(
      '#type' => 'fieldset',
      '#title' => t('Migrate members'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );

    $form['collection_manager']['migrate_members']['form'] = drupal_get_form('islandora_collection_migrate_form', $object);
  }

  if (user_access(FEDORA_PURGE)) {
    $form['collection_manager']['delete_members'] = array(
      '#type' => 'fieldset',
      '#title' => t('Delete members of this collection'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
    );
  }

  $form['collection_manager']['delete_members']['form'] = drupal_get_form('islandora_collection_deletion_form', $object);

  // Pass the form around any modules that are interested so that they can add their own collection management functions.
  module_invoke_all('islandora_collection_manager', $form);

  return $form;
}

/**
 * Determine whether or not to show this modules manage tab.
 *
 * @param FedoraObject $fedora_object
 *   The object being managed.
 *
 * @return boolean
 *   TRUE if it should be shown, and FALSE if it should not be shown.
 */
function islandora_basic_collection_access($object = NULL) {
  if (!isset($object)) {
    return FALSE;
  }
  $access = user_access(CREATE_CHILD_COLLECTION) ||
    user_access(MANAGE_COLLECTION_POLICY) ||
    user_access(MANAGE_CONTENT_MODEL_ASSOCIATION) ||
    user_access(MIGRATE_COLLECTION_MEMBERS) ||
    islandora_basic_collection_ingest_access($object);
  // The user is allowed to manage, and the object has our content model.
  return  user_access(FEDORA_MANAGE) && $access && in_array('islandora:collectionCModel', $object->models);
}

/**
 * Ingest action access callback.
 *
 * @param FedoraObject $object
 *   Collection object to check if ingestion is possible.
 */
function islandora_basic_collection_ingest_access($object = NULL) {
  if (!is_object($object) || !user_access(FEDORA_INGEST)) {
    return FALSE; // No ingest for you!
  }
  static $checked_objects = array(); // Reduce need to validate to once per object, as this if often called more than once per request.
  if (!in_array($object->id, array_keys($checked_objects))) {
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    $checked_objects[$object->id] = FALSE; // Assume no
    $configuration = islandora_basic_collection_get_ingest_configuration($object);
    if ($configuration) {
      $steps = islandora_ingest_get_steps($configuration);
      $checked_objects[$object->id] = count($steps) > 0; // Only if one or more steps are defined should we ingest.
    }
  }
  return $checked_objects[$object->id];
}


/**
 * Implements hook_theme().
 */
function islandora_basic_collection_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_basic_collection' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection',
      // We can add PIDs to the end of this pattern in our preprocess function
      //   and templates will be able to have have a pid appended to the
      //   template name to overide a template on a per object basis.
      // An example template might be named
      //   "islandora-basic-collection--islandora-27.tpl.php".
      'pattern' => 'islandora_basic_collection__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_grid' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection-grid',
      'pattern' => 'islandora_basic_collection_grid__',
      'variables' => array('islandora_object' => NULL, 'collection_results' => NULL),
    ),
    'islandora_basic_collection_wrapper' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'template' => 'theme/islandora-basic-collection-wrapper',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_basic_collection_management_form_table' => array(
      'file' => 'theme/islandora_basic_collection.theme.inc',
      'arguments' => array('element' => NULL),
      'file' => 'includes/collection_manager_table.inc',
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_basic_collection_islandora_collectionCModel_islandora_view_object(FedoraObject $object) {
  $output = theme('islandora_basic_collection_wrapper', array(
    'islandora_object' => $object,
  ));
  return array('Collection View' => $output);
}

/**
 * A wrapper to retrieve an object from Fedora.
 *
 * @deprecated
 *   Since this doesn't do anything else except call islandora_object_load(),
 *   it could easily be dropped for conciseness.
 *
 * @param string $object_id
 * @return null|\FedoraObject
 */
function islandora_basic_collection_get_object($object_id) {
  return islandora_object_load($object_id);
}

/**
 * Get objects associated with this object.
 *
 * Currently, we are only concerned with the with isMemberOf and
 * isMemberOfCollection relationships.
 *
 * @param FedoraObject $object
 * @param string $page_number
 * @param string $page_size
 * @return array
 */
function islandora_basic_collection_get_objects($object, $page_number = 1, $page_size = 5) {
  $query = 'select $object $title $content from <#ri>
             where ($object <fedora-model:label> $title
             and $object <fedora-model:hasModel> $content
             and ($object <fedora-rels-ext:isMemberOfCollection> <info:fedora/' . $object->id . '>
             or $object <fedora-rels-ext:isMemberOf> <info:fedora/' . $object->id . '>)
             and $object <fedora-model:state> <info:fedora/fedora-system:def/model#Active>)
             minus $content <mulgara:is> <info:fedora/fedora-system:FedoraObject-3.0>
             order by $title';
  $query_array = array(
    'query' => $query,
    'type' => 'itql',
    'pid' => $object->id,
    'page_size' => $page_size,
    'page_number' => $page_number
  );
  drupal_alter('islandora_basic_collection_query', $query_array);
  try {
    $results = $object->repository->ri->query($query_array['query'], $query_array['type']);
  } catch (Exception $e) {
    drupal_set_message(t('Islandora Error getting related objects for %s', array('%s' => $object->id)), 'error');
    return '';
  }
  return $results;
}

/**
 */
function islandora_basic_collection_islandora_undeletable_datastreams($models) {
  if (in_array('islandora:collectionCModel', $models)) {
    if (variable_get('islandora_basic_collection_disable_collection_policy_delete', TRUE)) {
      return array('COLLECTION_POLICY');
    }
  }
}

/**
 * Implements hook_permission().
 */
function islandora_basic_collection_permission() {
  return array(
    CREATE_CHILD_COLLECTION => array(
      'title' => t('Create Child Collections'),
      'description' => t('Allows users to create collections within a collection.')
    ),
    MANAGE_COLLECTION_POLICY => array(
      'title' => t('Manage Collection Policy'),
      'description' => t('Allows users to add Content Models to Collection Pollicies and define their namespace.')
    ),
    MANAGE_CONTENT_MODEL_ASSOCIATION => array(
      'title' => t('Manage Content Model Association'),
      'description' => t('Allows users to change content models for objects within a collection.')
    ),
    MIGRATE_COLLECTION_MEMBERS => array(
      'title' => t('Migrate Collection Members'),
      'description' => t('Allows user to move objects from one collection to another.')
    ),
  );
}

/**
 * Manage action that allows for the ingestion of an object into the given collection.
 *
 * @param FedoraObject $object.
 *   The collection to ingest into.
 *
 * @return
 *   The ingest form.
 */
function islandora_basic_collection_ingest_action($object) {
  if (($configuration = islandora_basic_collection_get_ingest_configuration($object)) !== FALSE) {
    module_load_include('inc', 'islandora', 'includes/ingest.form');
    return drupal_get_form('islandora_ingest_form', $configuration);
  }
  drupal_not_found();
}

/**
 * Generates an ingest configuration from the given collection object.
 *
 * @see islandora_ingest_form
 *
 * @param FedoraObject $object
 *   A collection object to generate the configuration from.
 *
 * @return array
 *   An ingest configuration array as defined by islandora_ingest_form() if possible FALSE otherwise.
 */
function islandora_basic_collection_get_ingest_configuration(FedoraObject $object) {
  if (in_array('islandora:collectionCModel', $object->models) && isset($object['COLLECTION_POLICY'])) {
    $policy = new CollectionPolicy($object['COLLECTION_POLICY']->content);
    return array(
      'collections' => array($object->id),
      'models' => array_keys($policy->getContentModels())
    );
  }
  return FALSE;
}

/**
 * The collection needs to add some additional, information to the ingest object based on what form association was used to select the metadata form.
 * Namely it needs to provide a default namespace, and collection to be ingested into. To do this it appends its own submit handler on to the metadata step.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 * @param string $form_id
 *   The islandora_ingest_form form id.
 */
function islandora_basic_collection_form_islandora_ingest_form_alter(array &$form, array &$form_state, $form_id) {
  $configuration = islandora_ingest_form_get_configuration($form_state);
  if (isset($configuration['collections'])) {
    $step_info = islandora_ingest_form_get_step_info($form_state);
    if (isset($step_info['form_id']) && $step_info['form_id'] == 'xml_form_builder_ingest_form' && !in_array('islandora_basic_collection_ingest_form_submit', $form['next']['#submit'])) {
      array_unshift($form['next']['#submit'], 'islandora_basic_collection_ingest_form_submit');
    }
  }
}

/**
 * Set the default namespace.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function islandora_basic_collection_ingest_form_submit(array $form, array &$form_state) {
  $configuration = islandora_ingest_form_get_configuration($form_state);
  $collection_id = current($configuration['collections']); // Only support 1 for now.
  $object = islandora_ingest_form_get_object($form_state); // Only support 1 for now.
  if (!isset($object->id)) {
    module_load_include('inc', 'islandora', 'includes/utilities');
    $collection_object = islandora_object_load($collection_id);
    $policy = new CollectionPolicy($collection_object['COLLECTION_POLICY']->content);
    $models = $policy->getContentModels();
    $step_info = islandora_ingest_form_get_step_info($form_state);
    $model = $step_info['args'][0]['content_model']; // Get the form association's content model.
    $model = $models[$model];
    $namespace = islandora_get_namespace($model['namespace']);
    $object->id = $object->repository->api->m->getNextPid($namespace);
  }
}
